" enable auto refresh files
set autoread

" http://qiita.com/shoma2da/items/92ea8badcd4655b6106c
" share clipboard with Mac
set clipboard+=unnamed


" https://github.com/mathiasbynens/dotfiles
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Add the g flag to search/replace by default
set gdefault
" Don’t add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif
" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Numbers
set number
set relativenumber
set numberwidth=5
" Enable syntax highlighting
syntax on
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
" Highlight dynamically as pattern is typed
set hlsearch
set incsearch		" do incremental searching
set ignorecase smartcase
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Show the cursor position
set ruler
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd
" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
	" Treat .md files as Markdown
  autocmd BufNewFile,BufRead *.md setlocal filetype=markdown

  " https://github.com/maksimr/vim-jsbeautify
  autocmd FileType javascript noremap <c-f> :call JsBeautify()<cr>
  autocmd FileType json noremap <c-f> :call JsonBeautify()<cr>
  autocmd FileType jsx noremap <c-f> :call JsxBeautify()<cr>
  autocmd FileType html noremap<c-f> :call HtmlBeautify()<cr>
  autocmd FileType css noremap <c-f> :call CSSBeautify()<cr>

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json

  " automatically rebalance windows on vim resize
  autocmd VimResized * :wincmd =

else
  set autoindent		" always set autoindenting on
endif





" http://stackoverflow.com/questions/916875/yank-file-name-path-of-current-buffer-in-vim
" copy full path, and relative path
nmap <leader>cpp :let @+ = expand("%:p")<cr>
nmap <leader>cpl :let @+ = expand("%")<cr>
nmap <leader>cpd :let @+ = expand("%:p:h")<cr>

" ctrl + q to quit
nmap <c-q> :quit<cr>

" enable matchiit
runtime macros/matchit.vim



" https://github.com/r00k/dotfiles/blob/master/vimrc
map <leader>p :set paste<CR><esc>"*]p:set nopaste<cr>
map <leader>ra :%s/



" https://github.com/thoughtbot/dotfiles/blob/master/vimrc
set autowrite     " Automatically :write before running commands

" Use the space key as our leader. Put this near the top of your vimrc
let mapleader = "\<Space>"

" Split edit your vimrc. Type space, v, r in sequence to trigger
nmap <leader>vr :sp $MYVIMRC<cr>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <leader>so :source $MYVIMRC<cr>

" escape from insert mode
inoremap <silent> jj <ESC>
inoremap <silent> jk <ESC>
inoremap <silent> kj <ESC>

" Map Ctrl-s to write the file
nmap <C-s> :w<cr>

" both exits insert mode and saves the buffer
imap <C-s> <esc>:w<cr>

" Pre-populate a split command with the current directory
nmap <leader>v :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" alt-t to create new file to horizontal split view
nmap † :new <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" F2 to rename
nmap <F2> :Rename <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" Copy the entire buffer into the system register
nmap <leader>co ggVG*y

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>




if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.gz,*.tar,*.tar.gz     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe                      " Windows
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|node_modules)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Use one space, not two, after punctuation.
set nojoinspaces

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" Make it obvious where 80 characters is
set textwidth=0
set colorcolumn=+1

" disable insert new line to a long line
set formatoptions=q

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Run commands that require an interactive shell
nnoremap <leader>r :RunInInteractiveShell<space>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical








" http://goo.gl/TWCXx0
" shift + tab to insert tab character
inoremap <S-Tab> <C-V><Tab>

" http://goo.gl/ztAO
set pastetoggle=<F3>

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set history=1000	" keep 1000 lines of command line history
" remove hightlight
map <leader>h :nohl<cr>

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

syntax enable
set background=dark
colorscheme gruvbox




" Space + his to jump to the most recently used files
nmap <leader>his :CtrlPMRUFiles<cr>

" Space + buf to jump to any files in the buffer
nmap <leader>buf :CtrlPBuffer<cr>




" https://github.com/christoomey/dotfiles/blob/250c4115dc4d6a7047763d746ceac41ebfbfcac4/vim/rcplugins/ack
nmap <leader>ck :Ack!<space>
nnoremap <leader>cc :cclose<cr>

function! s:VisualAck()
	let temp = @"
	normal! gvy
	let escaped_pattern = escape(@", "[]().*")
	let @" = temp
	execute "Ack! '" . escaped_pattern . "'"
endfunction

nnoremap K :Ack! '<C-r><C-w>'<cr>
vnoremap K :<C-u>call <sid>VisualAck()<cr>

let g:ackprg = 'ag --nogroup --nocolor --column'




" https://github.com/christoomey/vim-tmux-runner
let g:VtrUseVtrMaps = 1

" Python settings
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1
nnoremap <leader>py :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'python'}<cr>

" The following normal mode maps are provided when g:VtrUseVtrMaps is set to 1:
" 
"         Mapping      |   Command
"         -----------------------------
"         <leader>rr   |   VtrResizeRunner<cr>
"         <leader>ror  |   VtrReorientRunner<cr>
"         <leader>sc   |   VtrSendCommandToRunner<cr>
"         <leader>sl   |   VtrSendLinesToRunner<cr>
"         <leader>or   |   VtrOpenRunner<cr>
"         <leader>kr   |   VtrKillRunner<cr>
"         <leader>fr   |   VtrFocusRunner<cr>
"         <leader>dr   |   VtrDetachRunner<cr>
"         <leader>ar   |   VtrReattachRunner<cr>
"         <leader>cr   |   VtrClearRunner<cr>
"         <leader>fc   |   VtrFlushCommand<cr>
" 
" In addition, a single visual mode map is provided to send a visually selected
" region to the runner pane:
" 
"         Mapping      |   Command
"         -----------------------------
"         <leader>sl   |   VtrSendLinesToRunner<cr>





" mxw/vim-jsx
let g:jsx_ext_required = 0

" eslint --fix on every time js files are saved
command! EsFix :call vimproc#system_bg("eslint --fix " . expand("%"))
augroup javascript
  autocmd!
  autocmd BufWrite *.js,*.jsx EsFix
augroup END





" https://github.com/nvie/vim-flake8
" flake8 for python
let g:flake8_show_in_gutter = 0
let g:flake8_show_quickfix = 0
let g:syntastic_python_checkers = ["flake8"]
let g:autopep8_disable_show_diff = 1