[alias]
	a = add
	aa = add --all
	amend = commit --amend --reuse-message=HEAD
	ap = add --patch
	b = branch
	branches = branch -a
	browse = "!hub browse"
	c = clone --recursive
	ca = !git add -A && git commit -av
	car = commit --amend --no-edit
	cb = !"git branch 2>/dev/null | grep '^*' | colrm 1 2"
	cm = commit -m
	cma = commit -am
	co = checkout
	contributors = shortlog --summary --numbered
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	df = diff
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	dif = diff
	diffw = diff -w
	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -vE '(\\*|master|develop)' | xargs -n 1 git branch -d"
	dmr = "!git branch -r --merged | grep -vE '(\\*|master|develop)' | xargs -n 1 git branch -r -d"
	f = fetch
	fco = !"f() { git fetch origin $1 && git checkout $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	first = !"git init && git add . && git commit -m 'first commit'"
	flog = log --name-status
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	glog = log -E -i --grep
	h = help
	ignorechange = update-index --assume-unchanged
	ignored = !git ls-files -v | grep "^[[:lower:]]"
	issues = "!hub brose -- issues"
	l = log --oneline --decorate --graph --all -20
	lg = !"git lg3"
	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg3 = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
	logp = log -p --ignore-all-space --reverse
	ls = branch --list
	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"
	pf = push --force-with-lease
	pl = pull
	plr = pull --rebase
	pom = push -u origin master
	pop = stash pop
	ps = push
	psuo = push -u origin
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	remotes = remote -v
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
	ri = rebase -i
	s = status -sb
	sal = !"git sla" # accept mistyping
	save = stash save
	set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`
	st = status
	tags = tag -l
	tracechange = update-index --no-assume-unchanged
	trackall = "!for remote in `git branch -r`; do git branch --set-upstream-to=$remote ${remote#origin/}; done"
	uncommit = reset --soft HEAD^
	unstage = reset HEAD
	upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
	ureset = !git upstream && git reset --hard $(git upstream)
	v = rev-parse --short HEAD
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[color]
	diff = auto
	status = auto
	branch = auto
	ui = true
[commit]
	template = ~/.gitmessage
[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	editor = vim

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
[diff]
	# Detect copies as well as renames
	renames = copies
[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C
[fetch]
	prune = true
[include]
	path = ~/.gitconfig.local
[push]
	default = upstream
[difftool]
	prompt = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[user]
	name = Kei
	email = kei-sato@meeetol.com
